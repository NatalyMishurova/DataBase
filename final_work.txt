Сервис для просмотра отзывов, оценок врачей в различных клиниках, а так же просмотра отзывов о клинике в целом.
Каждый пользователь может оставить свой отзыв о той или иной клинике и враче. 
Кроме того, можно записаться на прием в любую клинику и любому доктору, которые зарегистрированы на данном сервисе.

1)Таблица пользователей
drop table if exists users;
create table users(
	id serial primary key,
	firstname varchar(255),
	lastname varchar(255),
	email varchar(255) unique,
	phone bigint 
);	
	
2)Типы пользователей
drop table if exists type_users;
create table type_users(
	id serial primary key,
	name enum('пациент','доктор') not null
);
-- при регистрации на сайте пользователь может зарегистрироваться как пациент или как доктор

3)Специальности врачей
drop table if exists specialty;
create table specialty(
	id serial primary key,
	name enum('офтальмолог','хирург','аллерголог','гастроэнтеролог','иммунолог',
	'кардиолог','невролог','онколог','терапевт','трихолог','уролог','эндокринолог') not null
);
-- enum чтобы база заполнялась только конкретными специальностями, а не какими-то абстрактными.

4)Фотографии пользователей/врачей/клиник
drop table if exists photo;
create table photo(
	id serial primary key,
	name varchar(255)
);
	
5)Профиль пользователей
drop table if exists profiles;
create table profiles(
	user_id serial primary key,
	gender enum('м','ж'),
	birthday date,
	hometown varchar(255),
	photo_id bigint unsigned not null,
	type_user_id bigint unsigned not null,
	created_at datetime, -- дата регистрации на сайте
	foreign key (user_id) references users(id)
		ON UPDATE cascade -- при изменении данных в главной таблице, обновятся данные и в зависимой таблице
    	ON DELETE restrict,  -- отклоняем удаление строк в главной таблице при наличии связей
	foreign key (photo_id) references photo(id),
	foreign key (type_user_id) references type_users(id)
);
	
-- здесь информация о пользователях, как о пациентах, так и докторах.
-- или лучше создавать отдельные таблицы 1)с пациентами и 2)с докторами?
 	
	
6)doctors_specialties
drop table if exists doctors_specialties;
create table doctors_specialties(
	user_id serial primary key, -- можно ли сделать, чтобы в эту таблицу попадали только врачи?
	specialty_id bigint unsigned not null, -- можно ли сделать так, чтобы поле заполнялось только для врачей?
	experience int unsigned not null, -- можно ли сделать так, чтобы поле заполнялось только для врачей?
	category enum('высшая','1 категория','2 категория','3 категория','null'), -- null если категории нет, можно ли сделать так, чтобы поле заполнялось только для врачей?
	foreign key (user_id) references users(id),
	foreign key (specialty_id) references specialty(id)
);
-- так как у одного доктора может быть несколько специальностей и к одной специальности относится много докторов, связь М:М

Далее составила таблицы пока только схематично.	
7)Список клиник
clinics
	id
	name
	
8)doctors_clinics
	user_id -- можно ли задать какое-то условие чтобы в эту таблицу попадали только врачи? т.к. только врачи работают в клинике
	clinic_id
-- один доктор может работать в разных клиниках одновременно и в одной клинике работает много докторов, связь М:М


9)Профиль клиники
info_clinic
	clinic_id
	photo_id
	adress
	phone
	body
	reviews_id
	
10)Отзывы
reviews
	id
	from_patient (пользователь, который пишет отзыв)
	to_doctor (доктор, о котором отзыв)
	clinic_id (клиника, в которой работает доктор)
	body
	дата посещения (клиники и врача)
	дата создания отзыва
-- тут тоже по идее надо как-то ввести условие, только пациент (from_user_id) может писать отзывы и только о докторах и клиниках после посещения.

11)Рейтинг, т.е. помимо отзыва, который написали, ставим еще оценку от 0 до 5 (0 плохо => 5 отлично). Но можно и не писать отзыв, а поставить только оценку.
rating
	id
	from_patient (связь с user_id, пользователь, который ставит оценку)
	to_doctor (связь с user_id, врач, которого оцениваем) 
	mark (оценка от 1 до 5)
	дата оценки
-- проблема аналогично таблице 10, можно ли при создании таблицы ввести условие?

12)Запись на прием к врачу (предполагаю, что выглядит как отправка сообщения в клинику)
message_to_vizit
	id
	from_patient (связь с user_id)
	clinic_id
	to_doctor (связь с user_id, к какому доктору собираемся на прием)
	date_to_vizit (указываем дату в которую хотим придти на прием)
	time_to_vizit (указываем время для посещения клиники)
