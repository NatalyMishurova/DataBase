Сервис для просмотра отзывов, оценок врачей в различных клиниках, а так же просмотра отзывов о клинике в целом.
Каждый пользователь может оставить свой отзыв о той или иной клинике и враче. 
Кроме того, можно записаться на прием в любую клинику и любому доктору.

1)Таблица пользователей
drop table if exists users;
create table users(
	id serial primary key,
	firstname varchar(255),
	lastname varchar(255),
	email varchar(255) unique,
	phone bigint 
);	
	
2)Типы пользователей
drop table if exists type_users;
create table type_users(
	id serial primary key,
	name enum('пациент','доктор') not null
);
-- при регистрации на сайте пользователь может зарегистрироваться как пациент или как доктор

3)Специальности врачей
drop table if exists specialty;
create table specialty(
	id serial primary key,
	name enum('офтальмолог','хирург','аллерголог','гастроэнтеролог','иммунолог',
	'кардиолог','невролог','онколог','терапевт','трихолог','уролог','эндокринолог') not null
);
-- enum чтобы база заполнялась только конкретными специальностями, а не какими-то абстрактными.

4)Фотографии пользователей/врачей/клиник
drop table if exists photo;
create table photo(
	id serial primary key,
	name varchar(255)
);
	
5)Профиль пользователей
drop table if exists profiles;
create table profiles(
	user_id serial primary key,
	gender enum('м','ж'),
	birthday date,
	hometown varchar(255),
	photo_id bigint unsigned not null,
	type_user_id bigint unsigned not null,
	created_at datetime,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	foreign key (user_id) references users(id)
		ON UPDATE cascade -- при изменении данных в главной таблице, обновятся данные и в зависимой таблице
    	ON DELETE restrict, -- отклоняем удаление строк в главной таблице при наличии связей
	foreign key (photo_id) references photo(id),
	foreign key (type_user_id) references type_users(id)
);
	
-- здесь информация о пользователях, как о пациентах, так и докторах.
-- или лучше создавать отдельные таблицы 1)с пациентами и 2)с докторами?
 	
	
6)doctors_specialties
drop table if exists doctors_spesialties;
create table doctors_specialties(
	user_id serial primary key,
	specialty_id bigint unsigned not null, -- можно ли сделать так, чтобы поле заполнялось только для врачей?
	experience int unsigned not null, -- можно ли сделать так, чтобы поле заполнялось только для врачей?
	category enum('высшая','1 категория','2 категория','3 категория','null'), -- null если категории нет, можно ли сделать так, чтобы поле заполнялось только для врачей?
	foreign key (user_id) references users(id),
	foreign key (specialty_id) references specialty(id)
);
-- так как у одного доктора может быть несколько специальностей и к одной специальности относится много докторов, связь М:М

7)Список клиник
drop table if exists clinics;
create table clinics(
	id serial primary key,
	name varchar(255) not null
);
	
8)doctors_clinics
drop table if exists doctors_clinics;
create table doctors_clinics(
	user_id bigint unsigned not null, -- можно ли задать какое-то условие чтобы в эту таблицу попадали только врачи? т.к. только врачи работают в клинике
	clinic_id bigint unsigned not null,
	foreign key (user_id) references users(id),
	foreign key (clinic_id) references clinics(id)
);
-- один доктор может работать в разных клиниках одновременно и в одной клинике работает много докторов, связь М:М

9)Отзывы
drop table if exists reviews;
create table reviews(
	id serial primary key,
	from_patient bigint unsigned not null, -- пользователь, который пишет отзыв
	to_doctor bigint unsigned not null, -- доктор, о котором отзыв
	body text, -- сам отзыв
	date_visit date, -- дата посещения врача
	created_at datetime -- дата создания отзыва
-- тут тоже по идее надо как-то ввести условие, только пациент (from_user_id) может писать отзывы и только о докторах и клиниках после посещения.

10)Профиль клиники
drop table if exists info_clinic;
create table info_clinic(
	clinic_id bigint unsigned not null,
	photo_id bigint unsigned not null,
	adress varchar(255) unique,
	phone bigint,
	body text, -- описание клиники, чем занимаются и тд.
	review_id bigint unsigned not null -- отзывы, которые оставлялись врачам, работающим в этой клинике.Т.е. эти отзывы относятся и к врачу и к клинике.
	foreign key (clinic_id) references clinics(id),
	foreign key (photo_id) references photo(id)
);
	
11)Рейтинг, т.е. помимо отзыва, который написали, ставим еще оценку от 0 до 5 (0 плохо => 5 отлично). Но можно и не писать отзыв, а поставить только оценку.
drop table if exists rating;
create table rating(
	id serial primary key,
	from_patient bigint unsigned not null, -- пациент, который ставит оценку
	to_doctor bigint unsigned not null, -- врач, которого оцениваем
	mark enum ('1','2','3','4','5'), -- оценка от 1 до 5
	created_at datetime, -- дата создания оценки
	foreign key (from_patient) references users(id),
	foreign key (to_doctor) references users(id)
);
-- можно ли тоже как-то ограничить, чтобы при заполнении данными оценки могли ставиться только пациентами и только докторам?


12)Запись на прием к врачу (предполагаю, что выглядит как отправка сообщения в клинику)
drop table if exists message_to_vizit;
create table message_to_vizit(
	id serial primary key,
	from_patient bigint unsigned not null, -- пациент, который планирует визит в клинику
	clinic_id bigint unsigned not null, -- в какую клинику собираемся
	to_doctor bigint unsigned not null, -- к какому доктору собираемся на прием)
	date_to_vizit date, -- (указываем дату в которую хотим придти на прием)
	time_to_vizit time, -- (указываем время для посещения клиники)
	foreign key (from_patient) references users(id),
	foreign key (to_doctor) references users(id),
	foreign key (clinic_id) references clinics(id)
);
-- аналогичный вопрос предыдущему про пациентов и врачей